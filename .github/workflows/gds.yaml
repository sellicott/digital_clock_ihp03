name: gds

on:
  push:
  workflow_dispatch:

jobs:
  gds:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build GDS
        uses: TinyTapeout/tt-gds-action@tt09
        with:
          flow: openlane2

  precheck:
    needs: gds
    runs-on: ubuntu-24.04
    steps:
      - name: Run Tiny Tapeout Precheck
        uses: TinyTapeout/tt-gds-action/precheck@tt09

  gl_test:
    needs: gds
    runs-on: ubuntu-24.04
    steps:
    - name: checkout repo
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download GDS artifact
      uses: actions/download-artifact@v4
      with:
        name: tt_submission

    - name: Set up environment variables
      shell: bash
      run: |
        sed 's/^ *//' << __EOF >> $GITHUB_ENV
          PDK_ROOT=$GITHUB_WORKSPACE/pdk
          PDK=ihp-sg13g2
          TT_ARGS=--ihp
        __EOF

    - name: Checkout IHP PDK repo
      uses: actions/checkout@v4
      with:
        repository: 'TinyTapeout/IHP-Open-PDK'
        ref: 'tt2025'
        path: pdk

    # Set Python up and install cocotb
    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install cocotb (if required)
      if: ${{ hashFiles('test/requirements.txt') == '' }}
      shell: bash
      run: pip install cocotb==1.8.0

    - name: Install Python packages
      if: ${{ hashFiles('test/requirements.txt') != '' }}
      shell: bash
      run: pip install -r test/requirements.txt

    - name: Install iverilog
      shell: bash
      run: |
        wget https://github.com/TinyTapeout/iverilog/releases/download/13.0-git-d8c3c51/iverilog_13.0-git-d8c3c51a-1_amd64.deb
        sudo apt-get update -y
        sudo apt-get install -y ./iverilog_13.0-git-d8c3c51a-1_amd64.deb

    - name: Run tests
      shell: bash
      run: |
        cp tt_submission/*.v "$TEST_DIR/gate_level_netlist.v"
        cd "$TEST_DIR"
        rm -f tb.vcd results.xml
        make -f makefile.gl clean
        GATES=yes make -f makefile.gl
        test -f results.xml
        ! grep failure results.xml

    - name: Upload VCD
      if: always()
      uses: actions/upload-artifact@v4
      with:
          name: gatelevel_test_vcd
          path: |
            ${{ env.TEST_DIR }}/tb.vcd
            ${{ env.TEST_DIR }}/results.xml

    - name: Test Summary
      if: always()
      uses: test-summary/action@v2.3
      with:
        paths: ${{ env.TEST_DIR }}/results.xml

  viewer:
    needs: gds
    runs-on: ubuntu-24.04
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    steps:
      - uses: TinyTapeout/tt-gds-action/viewer@ttihp25b
